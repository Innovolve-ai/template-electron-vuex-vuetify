name: pipeline

on:
  push:
    branches:
      - "*"
  pull_request:
    types: [opened, reopened]

jobs:
  branch-naming-rules:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    steps:
      - uses: deepakputhraya/action-branch-name@master
        with:
          regex: '([a-z])+\/([a-z])+' # Regex the branch should match. This example enforces grouping
          allowed_prefixes: "feature,stable,fix" # All branches should start with the given prefix
          ignore: master,develop # Ignore exactly matching branch names from convention
          min_length: 5 # Min length of the branch name
          max_length: 20 # Max length of the branch name

  unit-test:
    needs: [branch-naming-rules]
    name: ${{ matrix.friendlyName }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node: [17.6.0]
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            friendlyName: Unit Test - Ubuntu
          - os: macos-latest
            friendlyName: Unit Test - MacOS
          - os: windows-latest
            friendlyName: Unit Test - Windows
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Run Install
        run: |
          npm install

      # - name: Setup Xvfb
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     # Install display server dependencies
      #     # Install core libraries for chromium driver
      #     sudo apt install -y xvfb libxtst6 libxss1 libgtk2.0-0 libnss3 libasound2 libgconf-2-4
      #     export {no_proxy,NO_PROXY}="127.0.0.1,localhost"
      #     export DISPLAY=:99.0
      #     Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #     sleep 3

      - name: Run Unit Test with
        run: npm run test:unit

      # - name: Push to Coveralls
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

  functional-test:
    needs: [unit-test]
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: ${{ matrix.friendlyName }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node: [14.13.1]
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            friendlyName: Functional Test - Ubuntu

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Run Cypress using Docker
        run: |
          docker compose up

  release:
    needs: [unit-test, functional-test]
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: ${{ matrix.friendlyName }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node: [14.13.1]
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            friendlyName: Release - Ubuntu
          - os: macos-latest
            friendlyName: Release - MacOS
          - os: windows-latest
            friendlyName: Release - Windows
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Run Install
        if: matrix.os != 'ubuntu-latest'
        run: |
          npm install

      - name: Build electron
        if: matrix.os != 'ubuntu-latest'
        run: |
          npm run app:build

      - name: Run install and Build Electron for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        uses: docker://aemdesign/java-buildpack:ubuntu
        with:
          entrypoint: "/bin/sh"
          args: |
            -l -c "\
            nvm install v17.6.0 && npm install && npm run app:build

      - name: Release files
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: >
            dist_electron/*-mac.zip
            dist_electron/*.AppImage
            dist_electron/*.snap
            dist_electron/*.dmg
            dist_electron/*.dmg.blockmap
            dist_electron/*.exe
            dist_electron/*.exe.blockmap
            dist_electron/latest*.yml

      # - name: Build/release Electron app
      #   uses: samuelmeuli/action-electron-builder@v1
      #   with:
      #     build_script_name: "app:build"
      #     # GitHub token, automatically provided to the action
      #     # (No need to define this secret in the repo settings)
      #     github_token: ${{ secrets.github_token }}

      #     # If the commit is tagged with a version (e.g. "v1.0.0"),
      #     # release the app after building
      #     release: ${{ startsWith(github.ref, 'refs/tags/v') }}
